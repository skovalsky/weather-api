// const { Middleware } = require('swagger-express-middleware');
const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const OpenApiValidator = require('express-openapi-validator');
const logger = require('./logger');
const config = require('./config');
const axios = require('axios');
require('dotenv').config();

const WEATHER_API_KEY = process.env.WEATHER_API_KEY;
const WEATHER_API_URL = 'https://api.weatherapi.com/v1';

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    // Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`));
    // Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
    // View the openapi document in a visual interface. Should be able to test from this page
    //this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    this.app.use('/docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    this.app.get('/login-redirect', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.get('/oauth2-redirect.html', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(__dirname, 'controllers'), // Исправлено: явно указываем папку controllers
        fileUploader: { dest: config.FILE_UPLOAD_PATH },
      }),
    );

    // --- WeatherAPI Proxy Endpoints ---
    this.app.get('/api/autocomplete', async (req, res) => {
      const { q } = req.query;
      if (!q) return res.status(400).json({ error: 'Missing query' });
      try {
        const response = await axios.get(`${WEATHER_API_URL}/search.json`, {
          params: { key: WEATHER_API_KEY, q },
        });
        res.json(response.data);
      } catch (e) {
        res.status(500).json({ error: 'WeatherAPI autocomplete error', details: e.message });
      }
    });

    this.app.get('/api/forecast', async (req, res) => {
      const { q, days = 3, lang = 'ru' } = req.query;
      if (!q) return res.status(400).json({ error: 'Missing city' });
      try {
        const response = await axios.get(`${WEATHER_API_URL}/forecast.json`, {
          params: { key: WEATHER_API_KEY, q, days, lang },
        });
        res.json(response.data);
      } catch (e) {
        res.status(500).json({ error: 'WeatherAPI forecast error', details: e.message });
      }
    });

    this.app.get('/api/ip', async (req, res) => {
      try {
        const response = await axios.get(`${WEATHER_API_URL}/ip.json`, {
          params: { key: WEATHER_API_KEY, q: 'auto:ip' },
        });
        res.json(response.data);
      } catch (e) {
        res.status(500).json({ error: 'WeatherAPI ip error', details: e.message });
      }
    });
    this.app.get('/api/myip', async (req, res) => {
      try {
        //const response = await axios.get('http://api.myip.com');
        //logger.info('myip.com response:', response.data);
        //res.json(response.data);
        res.json({"ip":"146.150.65.20","country":"Ukraine","cc":"UA"})
      } catch (e) {
        logger.error('myip.com error:', e.message, e.response?.data);
        res.status(500).json({ error: 'myip.com error', details: e.message });
      }
    });
    // --- END WeatherAPI Proxy Endpoints ---
  }

  launch() {
    // eslint-disable-next-line no-unused-vars
    this.app.use((err, req, res, next) => {
      // format errors
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });

    http.createServer(this.app).listen(this.port);
    console.log(`Listening on port ${this.port}`);
  }

  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
